<?php

function islandora_utils_permission() {
  return array();
}

function islandora_utils_menu() {

  $items['admin/islandora/utils'] = array(
    'title' => 'Islandora Utils',
    'description' => 'Advanced admin functionality for Islandora',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_utils_form'),
    'access callback' => TRUE,
  );

  $items['admin/islandora/utils/'] = array(
    'title' => 'Home',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/islandora/utils/settings'] = array(
    'title' => 'Settings',
    'description' => 'Islandora Utility settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_utils_settings_form'),
    'access callback' => TRUE,
    'file' => 'admin/islandora_utils.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function islandora_utils_form($form, &$form_state) {

  $form = array(
    '#prefix' => '<div id="islandora-utils-form">',
    '#suffix' => '</div>',
  );

  $form['islandora_utils_query'] = array(
    '#type' => 'fieldset',
    '#title' => t('RI Query'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $query_id = 0;
  $query_name = '';
  $query = '';
  $queryy = 'select $object from <#ri>
     where
     $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
     and $object <fedora-model:hasModel> <info:fedora/islandora:pageCModel>
     order by $object';
  if (isset($form_state['values'])) {
    $query_id = $form_state['values']['islandora_utils_query_history'];
  }

  if (isset($form_state['triggering_element'])) {
    if ($form_state['triggering_element']['#button_id'] == 'islandora-utils-query-select') {
      if ($query_id != 0) {
        $result = db_select('islandora_utils_query_history', 'q')
          ->fields('q', array('query_id', 'query_name', 'query'))
          ->condition('query_id', $query_id, '=')
          ->execute()
          ->fetchAssoc();

        if (is_array($result)) {
          $form_state['input']['islandora_utils_query_query'] = $result['query'];
          $form_state['input']['islandora_utils_query_name'] = $result['query_name'];
        }
      }
      else {
        $form_state['input']['islandora_utils_query_query'] = '';
        $form_state['input']['islandora_utils_query_name'] = '';
      }
    }
    elseif ($form_state['triggering_element']['#button_id'] == 'islandora-utils-query-history-remove') {
      db_delete('islandora_utils_query_history')
        ->condition('query_id', $query_id)
        ->execute();
      $query_id = 0;
      $form_state['input']['islandora_utils_query_query'] = '';
      $form_state['input']['islandora_utils_query_name'] = '';
    }
  }

  $form['islandora_utils_query']['islandora_utils_query_query'] = array(
    '#type' => 'textarea',
    '#title' => t('ITQL Query'),
    '#default_value' => $query,
    '#description' => t('The query must just return a pid'),
    );
  if ($query_id == 0) {
     $form['islandora_utils_query']['islandora_utils_query_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Query Name'),
      '#default_value' => $query_name,
      '#description' => t('Specify a name to save query'),
    );
  }
  else {
    $form['islandora_utils_query']['islandora_utils_query_history_remove'] = array(
      '#type' => 'button',
      '#default_value' => t('Remove'),
      '#button_id' => 'islandora-utils-query-history-remove',
      '#ajax' => array(
        'event' => 'change',
        'callback' => 'islandora_utils_query_history_remove',
        'wrapper' => 'islandora-utils-form',
        'method' => 'replace',
      ),
    );
  }

  $results = db_select('islandora_utils_query_history', 'q')
    ->fields('q')
    ->orderBy('query_id', 'DESC')
    ->execute()
    ->fetchAllAssoc('query_id');

  $options = array();
  $options[0] = t('Select / New...');
  foreach ($results as $key => $value) {
    $options[$key] = $value->query_name;
  }

  $form['islandora_utils_query']['islandora_utils_query_history'] = array(
    '#type' => 'select',
    '#title' => t('Query History'),
    '#options' => $options,
    '#button_id' => 'islandora-utils-query-select',
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'islandora_utils_query_change',
      'wrapper' => 'islandora-utils-form',
      'method' => 'replace',
    ),
  );

  $form['islandora_utils_query']['islandora_utils_query_remote'] = array(
    '#type' => 'checkbox',
    '#title' => t('Run query on remote islandora'),
  );
  for($i = 20; $i <=100; $i += 20) {
    $batch_sizes[$i] = $i;
  }
  $form['islandora_utils_query']['islandora_utils_query_batch_size'] = array(
    '#type' => 'select',
    '#title' => t('Query Batch Size'),
    '#options' => $batch_sizes,
  );

  $form['islandora_utils_pids'] = array(
    '#type' => 'textarea',
    '#title' => t('List of pids'),
    '#description' => t('space seperated list of pids'),
    '#default_value' => 'islandora:299 islandora:313 codearl:9487 istories:4048 adr:20',
  );

  $form['islandora_utils_plugins'] = array(
    '#type' => 'fieldset',
    '#title' => t('Plugins'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $plugins = module_invoke_all('islandora_utils_plugin');
  $form_state['storage']['plugins'] = $plugins;

  /**
   *
   * @todo make this re-arrangable for doing a order of operatations on a object
   * @todo move options fieldset into ajax call back. only display options for the plugin if the plugin is selected
   */

  foreach ($plugins as $plugin => $details) {
    $form['islandora_utils_plugins']["plugin-$plugin"] = array(
      '#type' => 'checkbox',
      '#title' => check_plain($details['title']),
      '#description' => check_plain($details['description']),
      '#button_id' => "islandora-utils-plugins-plugin-$plugin",
      /*'#ajax' => array(
        'event' => 'change',
        'callback' => 'islandora_utils_plugin_options',
        'wrapper' => 'islandora-utils-form',
        'method' => 'replace',
      ),*/
    );
  }

  if(count($plugins) == 0) {
    $form['islandora_utils_plugins']['no_plugin'] = array(
      '#type' => 'item',
      '#markup' => t('Please enable at least on plugin under modules.'),
    );
  }

  $form['islandora_utils_plugin_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Plugin options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#weight' => 10000,
  );

  return $form;
}

function islandora_utils_query_history_remove($form, &$form_state) {
  return drupal_rebuild_form('islandora_utils_form', $form_state, $form);
}

function islandora_utils_query_change($form, &$form_state) {
  return drupal_rebuild_form('islandora_utils_form', $form_state, $form);
}


function islandora_utils_form_validate($form, &$form_state) {
  $plugins = islandora_utils_get_plugins($form_state);

  if(count($plugins) == 0) {
    form_set_error('', t('Please select at least one plugin'));
  }
  else {
    //$form_state['storgage']['plugins'] = $plugins;
  }
}

function islandora_utils_form_submit($form, &$form_state) {
  global $user;
  module_load_include('inc', 'islandora', 'includes/tuque');
  module_load_include('inc', 'islandora', 'includes/utilities');
  $values = $form_state['values'];
  if ($values['islandora_utils_query_history'] == 0 && $values['islandora_utils_query_name'] != '' && $values['islandora_utils_query_query'] != '') {
    $fields = array(
      'query_name' => $values['islandora_utils_query_name'],
      'query' => $values['islandora_utils_query_query'],
    );
    $query_id = db_insert('islandora_utils_query_history')
      ->fields($fields)
      ->execute();
  }

  $plugins = $form_state['storage']['plugins-use'];

  $batch = array(
    'title' => t('Process Request'),
    'operations' => array(),
  );

  $batch['operations'][] = array('islandora_utils_get_pids', array($form_state));

  batch_set($batch);

}


function islandora_utils_get_pids($form_state, &$context) {
  dsm($context, 'get pids');
  global $user;
  module_load_include('inc', 'islandora', 'includes/tuque');
  module_load_include('inc', 'islandora', 'includes/utilities');
  $values = $form_state['values'];

  if (!empty($values['islandora_utils_query_query'])) {
    dsm('querrrrr');
    try {
      $query = $values['islandora_utils_query_query'];
      $query_user = NULL;
      $query_url = NULL;
      if ($values['islandora_utils_query_remote']) {
        $query_url = variable_get('islandora_utils_remote_islandora_base_url', '');
        if (!variable_get('islandora_utils_remote_islandora_drupal_creds', '')) {
          $query_user = new stdClass();
          $query_user->name = variable_get('islandora_utils_remote_islandora_username', 'fedoraAdmin');
          $query_user->pass = variable_get('islandora_utils_remote_islandora_password', 'fedoraAdmin');
          $query_user->uid = -1;
        }
        else {
          $query_user = $user;
        }
      }

      $fedora = new IslandoraTuque($query_user, $query_url);

      $batch_size = $values['islandora_utils_query_batch_size'];
      $count_query = preg_replace('/^select \$object /', "select count($query) ", $query, 1);
      $count_result = $fedora->repository->ri->itqlQuery($count_query, 'unlimitied', 0);

      $total = $count_result[0]['k0']['value'];
      dsm($total, 'total');
      if($total > 0) {
        $num_batch = ceil($total / $batch_size);

        dd($total, 'total');
        dd($num_batch, 'num of batch');

        $batch = array(
          'title' => t('Process ITQL'),
          'operations' => array(),
          //'finished' => 'islandora_utils_get_pids_complete',
        );

        for($i = 1; $i <= $num_batch; $i++) { //for($i = 1; $i <= 2; $i++) { //
          dsm('get queries');
          $batch['operations'][] = array('islandora_utils_process_query', array($query, $batch_size, $fedora, $form_state));
        }
        batch_set($batch);

      }
    } catch (Exception $e) {
      drupal_set_message(t('Your ITQL query is invalid.'), 'error');
    }
  }

  if($values['islandora_utils_pids']) {
    $pids_raw = explode(' ', $values['islandora_utils_pids']);
    foreach ($pids_raw as $pid) {
      if (islandora_is_valid_pid($pid)) {
        dsm($pid, 'ddd');
        $context['results']['pids'] = array_merge($context['results']['pids'], $pid);
        //$pids[$pid] = $pid;
      }
    }
  }

  $batch = array(
    'title' => t('Process PIDS'),
    'operations' => array(),
  );

  $batch['operations'][] = array('islandora_utils_process_pids', array($form_state));

  batch_set($batch);
}

function islandora_utils_process_pids($form_state, &$context) {
  dsm($context, 'context in process pids');
}

function islandora_utils_process_query($query, $batch_size, $fedora, $form_state, &$context) {
  dsm('query');
  $pids = array();
  $results = $fedora->repository->ri->itqlQuery($query, 1, 0);

  //$objects = array_merge($results, $objects);
  if (count($results) > 0) {
    foreach ($results as $result) {
      $pid = $result['object']['value'];
      $pids[$pid] = $pid;
    }
    if(!isset($context['results']['pids'])) {
      $context['results']['pids'] = array();
    }
    $context['results']['pids'] = array_merge($context['results']['pids'], $pids);

    if(!isset($context['results']['form_state'])) {
      $context['results']['form_state'] = $form_state;
    }
  }


/*
       *
       * select count(select $object from <#ri> where
($object <fedora-model:hasModel> <info:fedora/ir:citationCModel> and $object <fedora-model:hasModel> <info:fedora/fedora-system:FedoraObject-3.0>
and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)) from <#ri>
where $object <fedora-model:hasModel> <info:fedora/fedora-system:FedoraObject-3.0>
and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
       *
       */
  /*
   *
   * $offset = 0;

      dd($results, 'results');
      $offset += $batch_size;
      $objects = array_merge($results, $objects);
   */
}

function islandora_utils_get_plugins(&$form_state) {
  module_load_include('inc', 'islandora', 'includes/IslandoraTuque');
  module_load_include('inc', 'islandora', 'includes/utilities');

  $plugins_raw = $form_state['storage']['plugins'];
  $plugins = array();

  foreach ($plugins_raw as $plugin => $details) {
    if ($form_state['values']["plugin-$plugin"]) {
      if ($details['module'] && $details['file']) {
        $path = drupal_get_path('module', $details['module']) . '/' . $details['file'];
        if (is_readable($path)) {
          require_once($path);
          $plugin_class = $details['class'];
          $plugin_function = $details['function'];

          if (class_exists($plugin_class)) {
            $implementation = new $plugin_class();

            if (method_exists($implementation, $plugin_function)) {
              $plugins[$plugin] = $details;
              unset($implementation);
            }
            else {
              dsm('func is missing');
            }
          }
          else {
              dsm('class is missing');
          }
        }
        else {
          dsm('file is not readable');
        }
      }
    }
  }

  $form_state['storage']['plugins-use'] = $plugins;

  return $plugins;
}

function islandora_utils_process_pid($pid, $plugin, $form_state, &$context) {
  $plugin_class = $plugin['class'];
  $plugin_function = $plugin['function'];

  $path = drupal_get_path('module', $plugin['module']) . '/' . $plugin['file'];
  require_once($path);
  $implementation = new $plugin_class($pid, $form_state, $context);
  $implementation->$plugin_function();

  if (!isset($context['results']['results'])) {
    $context['results']['results'] = array();
  }

  $context['results']['results'] = array_merge($context['results']['results'], $implementation->get_results()); //$context['results'][] = $implementation->get_results();
  $context['message'] = "Running $plugin_class => $plugin_function with PID $pid";
}

function islandora_utils_process_complete($success, $results, $operations) {
  islandora_utils_write_result($results['results']);

  module_invoke_all('islandora_utils_plugin_process_complete', $results);


}

/**
 *
 * @param type $results
 *  array (
 *    array(
 *      type(status/error)
 *      pid
 *      message
 *    )
 * )
 */
function islandora_utils_write_result($results = array()) {
  global $base_url;
  //drupal_get_messages('status');
  //drupal_get_messages('error');
  if (count($results) > 0) {
    if (variable_get('islandora_utils_output_settings_sort', '')) {
      foreach ($results as $key => $row) {
        $results_sorted[$key]  = $row['type'];
      }
      $results_sorted = array_map('strtolower', $results_sorted);
      array_multisort($results_sorted, SORT_ASC, $results);
    }

    if (variable_get('islandora_utils_output_settings_output_file', '')) {
      $file_name = 'islandora_utils_' . date('Y-m-d-h:i:s') . '.txt';
      $file_dir = variable_get('file_public_path', file_directory_temp());
      $results_file = file_create_filename($file_name, $file_dir);
      $fp = fopen($results_file, 'w');
    }
    foreach ($results as $result) {
      if ($result['type'] == 'status' && !variable_get('islandora_utils_output_settings_output_everything', '')) {
        continue;
      }

      if (variable_get('islandora_utils_output_settings_output_screen', '')) {
        drupal_set_message("<pre>" . $result['type'] . "\t" . $result['pid'] . "\t" . $result['dsid'] . "\t" . $result['message'] . "</pre>", 'status');
      }
      if (variable_get('islandora_utils_output_settings_output_file', '')) {
        $text = $result['type'] . "\t" . $result['pid'] . "\t" . $result['dsid'] . "\t" . $result['message'];
        fwrite($fp, $text . "\r");
      }
    }

    if (variable_get('islandora_utils_output_settings_output_file', '')) {
      fclose($fp);
      drupal_set_message(t('View results here >> ' . l(t('View'), $base_url . '/' . $results_file, array('attributes' => array('target' => '_blank')))));
    }
  }
  else {
    drupal_set_message(t('No resultsssss'));
  }

}

function islandora_utils_clean_result_files() {
  //foreach file in drupal file dir that starts with islandora_utilites - unlink
}

function islandora_utils_get_pids_complete($success, $results = NULL, $operations = NULL) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $pids = array();

  if($results == NULL && $operations == NULL) {
    if (isset($success['values'])) {
      $values = $success['values'];
    }
    $plugins = $success['storage']['plugins-use'];
    $form_state = $success;
  }
  else {
    $pids = array_merge($pids, $results['pids']);
    $form_state = $results['form_state'];
    $values = $form_state['values'];
    dsm($results, 'fffff');
    $plugins = $form_state['storage']['plugins-use'];
  }
  dsm($pids, 'pids before');
  $pids_raw = explode(' ', $values['islandora_utils_pids']);
  foreach ($pids_raw as $pid) {
    if (islandora_is_valid_pid($pid)) {
      $pids[$pid] = $pid;
    }
  }
  dsm($pids, 'ffffffffdfdfdfdf');
  dsm($plugins, 'bggggggggg');
  if (count($pids) > 0) {
    unset($batch);
    $batch = array(
      'title' => t('Process Batch'),
      'operations' => array(),
      'finished' => 'islandora_utils_process_complete',
    );

    foreach ($plugins as $plugin) {
      foreach ($pids as $pid) {
        $batch['operations'][] = array('islandora_utils_process_pid', array($pid, $plugin, $form_state));
      }
      reset($pids);
    }

    batch_set($batch);
  }
  else {
    drupal_set_message(t('Please select at least one PID'), 'error');
  }
}



/**
 * Implements hook_CMODEL_PID_islandora_view_object().
*/
function islandora_utils_newspapersssss_issueCModel_islandora_view_object($object, $page_number, $page_size) {
  dsm($object->id,'object');
  $viewer_url = variable_get('islandora_base_url', '') . '/get/' . $object->id . '/islandora:viewerSdef/getViewer';
  $output = '<iframe src="' . $viewer_url . '" frameborder="0" style="width: 100%; height: 800px;">Errors: unable to load viewer</iframe>';

  return $output;
}
