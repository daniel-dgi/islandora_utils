<?php

function islandora_utilities_permission() {
  return array();
}

function islandora_utilities_menu() {

  $items['admin/islandora/utilities'] = array(
    'title' => 'Islandora Utilities',
    'description' => 'Advanced admin functionality for Islandora',
    'page callback' => 'islandora_utilities_admin_page',
    'page arguments' => array('home'),
    'access callback' => TRUE,
  );

  $items['admin/islandora/utilities/home'] = array(
    'title' => 'Home',
    'description' => 'Islandora Utility settings',
    'page callback' => 'islandora_utilities_admin_page',
    'page arguments' => array('home'),
    'access callback' => TRUE,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/islandora/utilities/settings'] = array(
    'title' => 'Settings',
    'description' => 'Islandora Utility settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_utilities_settings_form'),
    'access callback' => TRUE,
    'file' => 'admin/islandora_utilities.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function islandora_utilities_admin_page($tab = '') {
  switch ($tab) {
    case 'home' :
    default :
      $output = drupal_get_form('islandora_utilities_form');

  }
  return $output;
}

function islandora_utilities_form($form, &$form_state) {
  $form['islandora_utilities_query'] = array(
    '#type' => 'fieldset',
    '#title' => t('RI Query'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    );

  $form['islandora_utilities_query']['query'] = array(
    '#type' => 'textarea',
    '#title' => t('Query'),
    );

  $form['islandora_utilities_query']['history'] = array(
    '#type' => 'item',
    '#markup' => t('save query history to db'),
    );

  $form['islandora_utilities_pids'] = array(
    '#type' => 'textarea',
    '#title' => t('List of pids'),
    '#description' => t('space seperated list of pids'),
    '#default_value' => 'islandora:299',
    );

  $plugins  = module_invoke_all('islandora_utilities_plugin');

  $form_state['storage']['plugins'] = $plugins;

  $form['islandora_utilities_plugins'] = array(
    '#type' => 'fieldset',
    '#title' => t('Plugins'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    );
  /**
   *
   * @todo make this re-arrangable for doing a order of operatations on a object
   */
  foreach($plugins as $plugin => $details) {
    dsm($plugin,'plugin');
    $form['islandora_utilities_plugins']["plugin-$plugin"] = array(
      '#type' => 'checkbox',
      '#title' => t($details['title']),
      '#description' => t($details['description']),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );

  return $form;
}
function islandora_utilities_validate_object_form($form, &$form_state) {


  return $form;
}


function islandora_utilities_form_submit($form, &$form_state) {
  module_load_include('inc', 'islandora', 'includes/tuque');
  module_load_include('inc', 'islandora', 'includes/utilities');
  $values = $form_state['values'];
  $pids_raw = explode(' ', $values['islandora_utilities_pids']);

  $pids = array();
  foreach ($pids_raw as $pid) {
    if(islandora_is_valid_pid($pid)) {
      $pids[] = $pid;
    }
  }

  islandora_utilities_process_objects($pids, $form_state);

  return $form;
}

function islandora_utilities_process_objects($pids = array(), $form_state) {
  module_load_include('inc', 'islandora', 'includes/IslandoraTuque');
  module_load_include('inc', 'islandora', 'includes/utilities');
  dsm($form_state,'formy');
  $output = array();

  $plugins_raw = $form_state['storage']['plugins'];
  $plugins = array();

  foreach($plugins_raw as $plugin => $details) {
    if($form_state['values']["plugin-$plugin"]) {
      $plugins[$plugin] = $details;
    }
  }

  foreach($plugins as $plugin) {
    if($plugin['module'] && $plugin['file']) {
    $path = drupal_get_path('module', $plugin['module']) . '/' . $plugin['file'];
    dsm($path,'path');
    //if(is_readable($path)) {
      dsm('file..is readable.');
      require_once($path);
dsm(file_get_contents($path), 'content');
      $plugin_class = $plugin['class'];
      $plugin_function = $plugin['function'];
      dsm($plugin_class,'class');
      dsm($plugin_function, 'function');
      $run = FALSE;
      if (class_exists($plugin_class)) {
        dsm('1111');
        $implementation = new $plugin_class();

        if(method_exists($implementation, $plugin_function)) {
          dsm('ggggggg');
          $run = TRUE;
          unset($implementation);
        }
        else {
          dsm('func is missing');
        }
      }
      else {
          dsm('class is missing');
      }

      if ($run) {
        foreach($pids as $pid) {
          if($fedora_object = islandora_object_load($pid)) {
            $implementation = new $plugin_class($fedora_object);
            dsm($implementation,'imp...');
            $implementation->$plugin_function();
            $output[] = $implementation->get_results(); //work this out

          }
        }

      }
      else {
        dsm('cant run class/function');
      }

      /*}
      else {
        dsm('file is not readable');
      }*/
    }

  }




}

function islandora_utilities_islandora_utilities_plugin() {
  return array(
    'validate' => array (
      'title' => 'Validate Objects',
      'module' => 'islandora_utilities',
      'file' => 'IslandoraUtilityPlugin.inc',
      'class' => 'IslandoraUtilityPlugin',
      'function' => "process",
      'description' => 'validate objects and ds against this...',
      'what' => 'else?'
    ),
    'bob' => array (
      'title' => 'bob',
      'module' => 'module',
      'file' => 'bob.inc',
      'class' => 'classie',
      'function' => "bob",
      'description' => 'bobob',
      'what' => 'else?'
    ),
  );
}

function bob($fedora_object) {
  dsm($fedora_object,'objects');
}

function islandora_utilities_validate_object($pids = array()) {
  module_load_include('inc', 'islandora', 'includes/IslandoraTuque');
  module_load_include('inc', 'islandora', 'includes/utilities');

  $results = array();

  foreach($pids as $pid) {
    if($fedora_object = islandora_object_load($pid)) {

      $models_object = $fedora_object->models;
      $datastreams_object = $fedora_object->repository->api->a->listDatastreams($pid);
      $datastreams_object_content_model = islandora_get_datastreams_requirements($fedora_object);

      $models_raw = variable_get('islandora_utilities_validate_object_settings_content_models', array());
      $models = explode(' ', $models_raw);

      $datastreams_raw = variable_get('islandora_utilities_validate_object_settings_datastream_ids', ' ');
      $datastreams = explode(' ', $datastreams_raw);
      $datastreams = array_flip($datastreams);

      if(variable_get('islandora_utilities_validate_object_settings_datastream_ids_merge', '')) {
        $datastreams = array_merge($datastreams, $datastreams_object_content_model);
      }

      $rels = $fedora_object->relationships->get();

      /*
      dsm($models,'models');
      dsm($models_object,'models object');
      dsm($rels,'rels');
      dsm($datastreams,'ds');
      dsm($datastreams_object_content_model,'ds from comdel');
      dsm($fedora_object,'obj');
      */


      foreach($models as $model) {
        if(in_array($model, $models_object)) {
          foreach($datastreams as $datastream => $value) {
            if($ds = $fedora_object[$datastream]) {
              dsm($ds,'ds from fedora');
              if(variable_get('islandora_utilities_validate_object_settings_datastream_size_zero', '')) {
                if($ds->size == -1) {
                  $results[] = array(
                    'type' => 'error',
                    'pid' => $pid,
                    'message' => "Datastream ($datastream) is 0 bytes",
                  );
                }
                else {
                  $results[] = array(
                    'type' => 'status',
                    'pid' => $pid,
                    'message' => "Datastream ($datastream) is $ds->size bytes",
                  );
                }
              }
            }
            else {
              $results[] = array(
                'type' => 'error',
                'pid' => $pid,
                'message' => "Datastream ($datastream) is missing",
              );
            }
          }
        }
      }
    }
  }
  islandora_utilities_write_result($results);
}

/**
 *
 * @param type $results
 *  array (
 *    array(
 *      type(status/error)
 *      pid
 *      message
 *    )
 * )
 */
function islandora_utilities_write_result($results = array()) {
  global $base_url;
  drupal_get_messages('status');
  drupal_get_messages('error');
  if(variable_get('islandora_utilities_output_settings_output_file', '')) {
    $file_name = 'islandora_utilities'.date('Y-m-d-h:i:s').'.txt';
    $file_dir = variable_get('file_public_path', file_directory_temp());
    $results_file = file_create_filename($file_name, $file_dir);
    $fp = fopen($results_file, 'w');
  }
  foreach($results as $result) {
    if($result['type'] == 'status' && !variable_get('islandora_utilities_output_settings_output_everything', '')) {
      continue;
    }

    if(variable_get('islandora_utilities_output_settings_output_screen', '')) {
      drupal_set_message('<pre>'.$result['type'] . "\t" . $result['pid'] . "\t" . $result['message'].'</pre>', 'status');
    }
    if(variable_get('islandora_utilities_output_settings_output_file', '')) {
      $text = $result['type'] . "\t" . $result['pid'] . "\t" . $result['message'];
      fwrite($fp, $text."\r");
    }
  }

  if(variable_get('islandora_utilities_output_settings_output_file', '')) {
    fclose($fp);
    drupal_set_message(t('View results here >> '.l('View', $base_url.'/'.$results_file)));
  }
}

function islandora_utilities_clean_result_files() {
  //foreach file in drupal file dir that starts with islandora_utilites - unlink
}